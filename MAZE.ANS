Test date: 03/07/19  10:23:57 
The number of times you used the grading program is 5 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Maze Grading System Version 4.0
Student: St#1=smart                St#2t=landsberg            Type=Team                
Grading and testing history log
       User Test.    Date: 03/06/19  20:38:58  maze.01      -            
       User Test.    Date: 03/06/19  20:40:27  maze.01      -            
       User Test.    Date: 03/06/19  20:42:08  maze.01      -            
       User Test.    Date: 03/06/19  20:43:16  maze.01      -            
       User Test.    Date: 03/06/19  20:48:20  maze.01      -            
       User Test.    Date: 03/06/19  20:51:23  maze.01      -            
       User Test.    Date: 03/06/19  20:55:11  maze.01      -            
       User Test.    Date: 03/06/19  20:57:50  maze.01      -            
       User Test.    Date: 03/06/19  21:03:23  maze.01      -            
       User Test.    Date: 03/06/19  21:13:44  maze.01      -            
       User Test.    Date: 03/06/19  21:16:04  maze.01      -            
       User Test.    Date: 03/06/19  21:27:06  maze.01      -            
       User Test.    Date: 03/06/19  21:28:40  maze.01      -            
       User Test.    Date: 03/06/19  21:30:48  maze.01      -            
       User Test.    Date: 03/06/19  21:31:59  maze.01      -            
       User Test.    Date: 03/06/19  21:38:31  maze.01      -            
       User Test.    Date: 03/06/19  21:41:06  maze.01      -            
       User Test.    Date: 03/06/19  21:43:36  maze.01      -            
       User Test.    Date: 03/06/19  21:44:09  maze.02      -            
       User Test.    Date: 03/06/19  21:44:38  maze.03      -            
       User Test.    Date: 03/06/19  21:45:10  maze.04      -            
       User Test.    Date: 03/06/19  21:45:58  maze.02      -            
       User Test.    Date: 03/06/19  21:46:35  maze.01      -            
       User Test.    Date: 03/06/19  21:52:28  maze.01      -            
       User Test.    Date: 03/06/19  21:56:20  maze.01      -            
       User Test.    Date: 03/06/19  21:57:04  maze.01      -            
       User Test.    Date: 03/06/19  22:04:38  maze.01      -            
       User Test.    Date: 03/06/19  22:18:48  maze.01      -            
       User Test.    Date: 03/06/19  22:47:37  maze.01      -            
       User Test.    Date: 03/06/19  23:18:17  r            -            
   *** Grading Run.  Date: 03/06/19  23:20:59 
   ************************************************** 
   *** Program works correctly.                       
   *** Additional runs are to improve efficiency.     
   *** Completion -- Date: 03/06/19  23:30:13                     
   ************************************************** 
   *** Grading Run.  Date: 03/06/19  23:30:18 
   *** Grading Run.  Date: 03/06/19  23:44:17 
   *** Grading Run.  Date: 03/06/19  24:56:00 
   *** Grading Run.  Date: 03/07/19  10:23:57 
Testing against the nextval specification
Test completed okay
Testing against non symetrical maze
Test completed okay
Testing against a set of random mazes
Test completed okay
Testing for correct operation and efficiency
Building the maze....
Congratulations! Your mouse has traversed the maze.
 
++ Grade ++   50 = Points earned for correct answers.
Your executed instruction count = 000011377

++ Grade ++    0 = Points earned for code executed efficiency.
Target executed: 15 = 0-4999  10 = 5000-5249  5 = 5250-5499  0 = 5500+ 

++ Grade ++   10 = Points for code written. Your count is:  42.
Target written : 15 = 00-40  10 = 41-45  5 = 46-50  0 = 51+

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0022 The program header format is adequate. 
DOCHB-0.67 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++   80 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    30  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     4  = Number of grading runs to improve efficiency or documentation. 

+- atyC;6&}xC6&k~C6&juiC86&zuzC>6&Zkyz&jgzk@&6956=57?&&76@89@;=&



Building the file maze.ans for electronic submission...

;---------------------------------------------------------------------
; Program:   nextval subroutine
;
; Function:  Find next mouse move in an array 15 by 30.
;            We can move into a position if its contents is blank ( 20h ).
;
; Input:     Calling sequence is:
;            x    pointer   si
;            y    pointer   di
;            dir  pointer   bx
;            maze pointer   bp
;
; Output:    x,y,dir modified in caller's data segment
;
; Owner:     Dana A. Lasher, Ian Smart Thomas Landsberg
;
; Date:      Update Reason
; --------------------------
; 11/06/2016 Original version
; 03/05/2019 First Draft
;
;---------------------------------------
         .model    small               ;64k code and 64k data
         .8086                         ;only allow 8086 instructions
         public    nextval             ;allow extrnal programs to call
;---------------------------------------


;---------------------------------------
         .data                         ;start the data segment
a         db       30                  ;char to represent a new
empty     db       20h                 ;char to represent a empty tile
;---------------------------------------


;---------------------------------------
         .code                         ;start the code segment
;---------------------------------------
; Save any modified registers
;---------------------------------------
nextval:                               ;
         push      ax                  ;Save the address of di
         push      cx                  ;Save the address of si
         push      bp                  ;Save the address of the maze
         push      dx                  ;Save the address of the dx
;---------------------------------------
; Start of the loop and increments the
; direction
;---------------------------------------
         add       byte ptr [bx],2     ;Add 2 to the address in the first pass
increment:                             ;Label for the begining of the loop
         mov       al,[di]             ;Load al with the y value
         mov       cl,[si]             ;Load cl with the x value
         sub       byte ptr [bx],1     ;Move to the next direction
         jnz       check               ;If not continue
         mov       byte ptr [bx],4     ;If it is out of bounds, reset it
;---------------------------------------
; Checks to see what the current direction
; is and passes it to the correct label 
;---------------------------------------
check:                                 ;
         cmp       byte ptr [bx],2     ;Check if the direction is down
         jb        right               ;Jump to right
         je        down                ;Jump to down
         cmp       byte ptr [bx],4     ;Check if the direction is upward
         jb        left                ;Jump to left
         je        upward              ;Jump to right
;---------------------------------------
; Resets the direction if the value is above 4
;---------------------------------------
above:                                 ;Handles direction being out of bounds
         mov       byte ptr [bx],1     ;Resets the direction
;---------------------------------------
; Set X and Y according to the direction
;---------------------------------------
right:                                 ;
         add       cl,1                ;Moves x up 1
         jmp       calculate           ;Jumps to calculation
upward:                                ;
         sub       al,1                ;Moves y down 1
         jmp       calculate           ;Jumps to calulation
left:                                  ;
         sub       cl,1                ;Moves x down 1
         jmp       calculate           ;Jumps to calculation
down:                                  ;
         add       al,1                ;Moves y up 1
;---------------------------------------
; Saves the x and y values in another register
; so the current ones can be used to calculate the offset
;---------------------------------------
calculate:                             ;
         mov       dh,al               ;Saves y value
         mov       dl,cl               ;Saves x value
;---------------------------------------
; Calculate the offset
;---------------------------------------
         dec       al                  ;Decrement y
         dec       cl                  ;Decrement x
         mul       [a]                 ;Multiply y by columns
         add       ax,cx               ;Add x to calculate offset
;---------------------------------------
; Checks to see if the space is empty.
; If its not, it starts over.
;---------------------------------------
         add       bp,ax               ;Offsets bp by the offset
         mov       cl,ds:[bp]          ;Copies over the 
         sub       bp,ax               ;Resets bp
         cmp       cl,20h              ;Check if empty
         jne       increment           ;Not empty, try again
;---------------------------------------
; Store the x and y values into the pointers
;---------------------------------------
exit:
         mov       [di],dh             ;Stores the new y value 
         mov       [si],dl             ;Stores the new x value
;---------------------------------------
; Restore registers and return
;---------------------------------------
         pop       dx                  ;Restore the address of dx
         pop       bp                  ;Restore the address of the maze\
         pop       cx                  ;Restore the address of si
         pop       ax                  ;Restore the address of di
;---------------------------------------
; Return to the calling program
;---------------------------------------
         ret                           ;return
;---------------------------------------
         end
