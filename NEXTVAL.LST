Microsoft (R) Macro Assembler Version 6.11		    03/07/19 10:23:35
nextval.asm						     Page 1 - 1


				;---------------------------------------------------------------------
				; Program:   nextval subroutine
				;
				; Function:  Find next mouse move in an array 15 by 30.
				;            We can move into a position if its contents is blank ( 20h ).
				;
				; Input:     Calling sequence is:
				;            x    pointer   si
				;            y    pointer   di
				;            dir  pointer   bx
				;            maze pointer   bp
				;
				; Output:    x,y,dir modified in caller's data segment
				;
				; Owner:     Dana A. Lasher, Ian Smart Thomas Landsberg
				;
				; Date:      Update Reason
				; --------------------------
				; 11/06/2016 Original version
				; 03/05/2019 First Draft
				;
				;---------------------------------------
				         .model    small               ;64k code and 64k data
				         .8086                         ;only allow 8086 instructions
				         public    nextval             ;allow extrnal programs to call
				;---------------------------------------


				;---------------------------------------
 0000				         .data                         ;start the data segment
 0000 1E			a         db       30                  ;char to represent a new
 0001 20			empty     db       20h                 ;char to represent a empty tile
				;---------------------------------------


				;---------------------------------------
 0000				         .code                         ;start the code segment
				;---------------------------------------
				; Save any modified registers
				;---------------------------------------
 0000				nextval:                               ;
 0000  50			         push      ax                  ;Save the address of di
 0001  51			         push      cx                  ;Save the address of si
 0002  55			         push      bp                  ;Save the address of the maze
 0003  52			         push      dx                  ;Save the address of the dx
				;---------------------------------------
				; Start of the loop and increments the
				; direction
				;---------------------------------------
 0004  80 07 02			         add       byte ptr [bx],2     ;Add 2 to the address in the first pass
 0007				increment:                             ;Label for the begining of the loop
 0007  8A 05			         mov       al,[di]             ;Load al with the y value
 0009  8A 0C			         mov       cl,[si]             ;Load cl with the x value
 000B  80 2F 01			         sub       byte ptr [bx],1     ;Move to the next direction
 000E  75 03			         jnz       check               ;If not continue
 0010  C6 07 04			         mov       byte ptr [bx],4     ;If it is out of bounds, reset it
				;---------------------------------------
				; Checks to see what the current direction
				; is and passes it to the correct label 
				;---------------------------------------
 0013				check:                                 ;
 0013  80 3F 02			         cmp       byte ptr [bx],2     ;Check if the direction is down
 0016  72 0C			         jb        right               ;Jump to right
 0018  74 18			         je        down                ;Jump to down
 001A  80 3F 04			         cmp       byte ptr [bx],4     ;Check if the direction is upward
 001D  72 0E			         jb        left                ;Jump to left
 001F  74 08			         je        upward              ;Jump to right
				;---------------------------------------
				; Resets the direction if the value is above 4
				;---------------------------------------
 0021				above:                                 ;Handles direction being out of bounds
 0021  C6 07 01			         mov       byte ptr [bx],1     ;Resets the direction
				;---------------------------------------
				; Set X and Y according to the direction
				;---------------------------------------
 0024				right:                                 ;
 0024  80 C1 01			         add       cl,1                ;Moves x up 1
 0027  EB 0B			         jmp       calculate           ;Jumps to calculation
 0029				upward:                                ;
 0029  2C 01			         sub       al,1                ;Moves y down 1
 002B  EB 07			         jmp       calculate           ;Jumps to calulation
 002D				left:                                  ;
 002D  80 E9 01			         sub       cl,1                ;Moves x down 1
 0030  EB 02			         jmp       calculate           ;Jumps to calculation
 0032				down:                                  ;
 0032  04 01			         add       al,1                ;Moves y up 1
				;---------------------------------------
				; Saves the x and y values in another register
				; so the current ones can be used to calculate the offset
				;---------------------------------------
 0034				calculate:                             ;
 0034  8A F0			         mov       dh,al               ;Saves y value
 0036  8A D1			         mov       dl,cl               ;Saves x value
				;---------------------------------------
				; Calculate the offset
				;---------------------------------------
 0038  FE C8			         dec       al                  ;Decrement y
 003A  FE C9			         dec       cl                  ;Decrement x
 003C  F6 26 0000 R		         mul       [a]                 ;Multiply y by columns
 0040  03 C1			         add       ax,cx               ;Add x to calculate offset
				;---------------------------------------
				; Checks to see if the space is empty.
				; If its not, it starts over.
				;---------------------------------------
 0042  03 E8			         add       bp,ax               ;Offsets bp by the offset
 0044  3E: 8A 4E 00		         mov       cl,ds:[bp]          ;Copies over the 
 0048  2B E8			         sub       bp,ax               ;Resets bp
 004A  80 F9 20			         cmp       cl,20h              ;Check if empty
 004D  75 B8			         jne       increment           ;Not empty, try again
				;---------------------------------------
				; Store the x and y values into the pointers
				;---------------------------------------
 004F				exit:
 004F  88 35			         mov       [di],dh             ;Stores the new y value 
 0051  88 14			         mov       [si],dl             ;Stores the new x value
				;---------------------------------------
				; Restore registers and return
				;---------------------------------------
 0053  5A			         pop       dx                  ;Restore the address of dx
 0054  5D			         pop       bp                  ;Restore the address of the maze\
 0055  59			         pop       cx                  ;Restore the address of si
 0056  58			         pop       ax                  ;Restore the address of di
				;---------------------------------------
				; Return to the calling program
				;---------------------------------------
 0057  C3			         ret                           ;return
				;---------------------------------------
				         end
 
Microsoft (R) Macro Assembler Version 6.11		    03/07/19 10:23:35
nextval.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0002	  Word	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	16 Bit	 0058	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
above  . . . . . . . . . . . . .	L Near	 0021	  _TEXT	
a  . . . . . . . . . . . . . . .	Byte	 0000	  _DATA	
calculate  . . . . . . . . . . .	L Near	 0034	  _TEXT	
check  . . . . . . . . . . . . .	L Near	 0013	  _TEXT	
down . . . . . . . . . . . . . .	L Near	 0032	  _TEXT	
empty  . . . . . . . . . . . . .	Byte	 0001	  _DATA	
exit . . . . . . . . . . . . . .	L Near	 004F	  _TEXT	
increment  . . . . . . . . . . .	L Near	 0007	  _TEXT	
left . . . . . . . . . . . . . .	L Near	 002D	  _TEXT	
nextval  . . . . . . . . . . . .	L Near	 0000	  _TEXT	Public
right  . . . . . . . . . . . . .	L Near	 0024	  _TEXT	
upward . . . . . . . . . . . . .	L Near	 0029	  _TEXT	

	   0 Warnings
	   0 Errors
